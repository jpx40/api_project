{% extends "layout.html" %}
{% block main_content %}
    <h3 class="he">Dashboard</h3>
<section class="main-block">

    <section>
        <section class="park_public">
            <h2> Public</h2>
        <div id="container" x-data="two_value = false"  >
            <div  id="one" class="parkplatz_frei"><p class="inbox">
                1</p>
            </div>


            <div id="two" class="parkplatz_frei" ><p class="inbox">
                2</p>
            </div>

            <div id="three" class="parkplatz_frei"><p class="inbox">
                3</p>
            </div>

            <div id="four" class="parkplatz_frei"><p class="inbox">
                4</p>
            </div>

            <div id="five" class="parkplatz_frei"><p class="inbox">
                5</p>
            </div>

            <div id="six" class="parkplatz_frei"><p class="inbox">
                6</p>
            </div>


            </div>
        </div>
    </section>



    </section>
    <section class="game">
        <h5 class="hgame"> Spiel</h5>
        <div x-data="{ game: [] }"
             x-init="game = await (await fetch('http://10.0.0.58:8000/api/user/')).json()">

            <div class="relative overflow-x-auto">

                <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">


                    <tr>
                        <th scope="col" class="px-6 py-3">
                            Game
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Score
                        </th>

                    </tr>
                    </thead>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text=""></td>
                        <td class="px-6 py-4"

                            x-text=""></td>


                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="game.user[1].Benutzername"></td>
                        <td class="px-6 py-4"

                            x-text="game.user[1].Benutzername"></td>


                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="game.user[2].Punkte"></td>
                        <td class="px-6 py-4"

                            x-text="game.user[2].Punkte"></td>


                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="game.user[3].Benutzername"></td>
                        <td class="px-6 py-4"

                            x-text="game.user[3].Punkte"></td>


                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="game.user[4].Benutzername"></td>
                        <td class="px-6 py-4"

                            x-text="game.user[4].Punkte"></td>


                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="game.user[5].Benutzername"></td>
                        <td class="px-6 py-4"

                            x-text="game.user[5].Punkte"></td>


                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="game.user[6].Benutzername"></td>
                        <td class="px-6 py-4"

                            x-text="game.user[6].Punkte"></td>


                    </tr>
                </table>
            </div>
        </div>
    </section>





    <section>
                <h4> Wechselarbeitsplatz</h4>

        <div x-data="{ arbeitzplatz: [] }"
             x-init="arbeitzplatz = await (await fetch('/api/arbeitzplatz/')).json()">

            <div class="relative overflow-x-auto">

                <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">


                    <tr>
                        <th scope="col" class="px-6 py-3">
                            Arbeitzplatz
                        </th>
                        <th scope="col" class="px-6 py-3">
                            User
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Status
                        </th>

                    </tr>
                    </thead>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"
                            x-text="arbeitzplatz.arbeitzplatz[0].id"></td>
                        <td class="px-6 py-4"
                            x-text="arbeitzplatz.arbeitzplatz[0].id"></td>
                        <td class="px-6 py-4"
                            x-text="arbeitzplatz.arbeitzplatz[0].id"></td>


                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[1].id"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[1].user"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[1].status"></td>


                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[2].id"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[2].user"></td>
                        <td class="px-6 py-4"
                            x-text="arbeitzplatz.arbeitzplatz[2].status"></td>


                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[3].id"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[3].user"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[3].status"></td>


                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"
                            x-text="arbeitzplatz.arbeitzplatz[4].id"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[4].user"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[4].status"></td>

                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[5].id"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[5].user"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[5].status"></td>

                    </tr>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[6].id"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[6].user"></td>
                        <td class="px-6 py-4"

                            x-text="arbeitzplatz.arbeitzplatz[6].status"></td>

                    </tr>
                </table>
            </div>
        </div>
    </section>


<script>
try{
   // let parkplatz = await (await fetch('http://127.0.0.1:8000/api/game/')).json();

}  catch (error) {
  console.error(error);
  // Expected output: ReferenceError: nonExistentFunction is not defined
  // (Note: the exact output may be browser-dependent)
}
async function color_change_parkplatz_public() {


    let url_parkplatz = 'http://10.0.0.58:8000/api/parkplatz';


    const request = new Request(url_parkplatz, {
        method: "GET"
    });

    const url = request.url;
    const method = request.method;
    const credentials = request.credentials;

    function fetch_parkplatz() {
        fetch(request)
            .then((response) => {
                if (response.status === 200) {
                    return response.json();
                } else {
                    throw new Error("Something went wrong on API server!");
                }
            })
            .then((response) => {
                console.debug(response);
                // â€¦
            })
            .catch((error) => {
                console.error(error);
            });
    }

    //let response = await fetch(url)
    //let response = htmx.ajax('GET', url, context: { headers:{"Content-Type": "application/json"});
    let parkplatz = fetch_parkplatz(request);
    if (parkplatz.one.Status == ""Besetzt
    ") {
        htmx.removeClass(htmx.find("#one"), "parkplatz_frei", 1000);
        htmx.addClass(htmx.find('#one'), 'parkplatz_besetzt', 1000);

    }
    else {
        htmx.removeClass(htmx.find("#one"), "parkplatz_besetzt", 1000);
        htmx.addClass(htmx.find('#one'), 'parkplatz_frei', 1000);
    }
if (parkplatz.two.Status == "Besetzt") {
        htmx.removeClass(htmx.find("#two"), "parkplatz_frei", 1000);
        htmx.addClass(htmx.find('#two'), 'parkplatz_besetzt', 1000);
    }
    else {
        htmx.removeClass(htmx.find("#two"), "parkplatz_besetzt", 1000);
        htmx.addClass(htmx.find('#two'), 'parkplatz_frei', 1000);
    }

if (parkplatz.three.Status == "Besetzt") {
        htmx.removeClass(htmx.find("#three"), "parkplatz_frei", 1000);
        htmx.addClass(htmx.find('#three'), 'parkplatz_besetzt', 1000);
    }
    else {
        htmx.removeClass(htmx.find("#three"), "parkplatz_besetzt", 1000);
        htmx.addClass(htmx.find('#three'), 'parkplatz_frei', 1000);
    }

if (parkplatz.four.Status === "Besetzt") {
        htmx.removeClass(htmx.find("#four"), "parkplatz_frei", 1000);
        htmx.addClass(htmx.find('#four'), 'parkplatz_besetzt', 1000);
    }
    else {
        htmx.removeClass(htmx.find("#four"), "parkplatz_besetzt", 1000);
        htmx.addClass(htmx.find('#four'), 'parkplatz_frei', 1000);
    }

if (parkplatz.five.Status == "Besetzt") {
        htmx.removeClass(htmx.find("#five"), "parkplatz_frei", 1000);
        htmx.addClass(htmx.find('#five'), 'parkplatz_besetzt', 1000);
    }
    else {
        htmx.removeClass(htmx.find("#five"), "parkplatz_besetzt", 1000);
        htmx.addClass(htmx.find('#five'), 'parkplatz_frei', 1000);
    }
if (parkplatz.six.Status == "Besetzt") {
        htmx.removeClass(htmx.find("#six"), "parkplatz_frei", 1000);
        htmx.addClass(htmx.find('#six'), 'parkplatz_besetzt', 1000);
    }
    else {
        htmx.removeClass(htmx.find("#six"), "parkplatz_besetzt", 1000);
        htmx.addClass(htmx.find('#six'), 'parkplatz_frei', 1000);
    }


delete (url)

    //setTimeout(color_change_parkplatz_public, 1000)

}
async function get_user() {


    let url2 = '/api/users';

    let response = await fetch(url2, {
        headers: {
            'Cache-Control': 'no-store'

        }
    })
    //let response = htmx.ajax('GET', url, context: { headers:{"Content-Type": "application/json"});
    let user = await response.json();
    //alert(user[0].Email)
return user
}
get_user()
Alpine.data({user: get_user()})
color_change_parkplatz_public()
</script>


{% endblock %}